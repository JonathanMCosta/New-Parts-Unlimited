# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- terraform
pool:
  name: Azure Pipelines
  vmImage: 'windows-latest'

stages:
- stage: CI 

  variables:
    BuildConfiguration : 'Release'

  jobs:
  - job: Build
    steps:
    - task: DotNetCoreCLI@2
      displayName: Restore
      inputs:
        command: restore
        projects: '**/*.csproj'
    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        projects: '**/*.csproj'
        arguments: '--configuration $(BuildConfiguration)'
    - task: DotNetCoreCLI@2
      displayName: Test
      inputs:
        command: test
        projects: '**/*[Tt]ests/*.csproj'
        arguments: '--configuration $(BuildConfiguration)'
    - task: DotNetCoreCLI@2
      displayName: Publish
      inputs:
        command: publish
        publishWebProjects: True
        arguments: '--configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory)'
        zipAfterPublish: True
    - task: CopyFiles@2
      displayName: 'Copy Terraform files to artifacts'
      inputs:
        SourceFolder: Terraform
        TargetFolder: '$(build.artifactstagingdirectory)/Terraform'
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'
      condition: succeededOrFailed()

- stage: dev
  
  variables:
    terraformstoragerg: 'terraformrg'
    terraformstorageaccount: 'terraformstorage202011'
    appservicename: 'pulterraformweb$(System.StageDisplayName)'
    appserviceplan: 'PULTerraformplan$(System.StageDisplayName)'
    storagekey: 'PipelineWillGetThisValueRuntime'

  jobs:
  - job: Deploy
    steps:
    #Your build pipeline references an undefined variable named ‘Parameters.ConnectedServiceName’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
    #Your build pipeline references an undefined variable named ‘Parameters.WebAppKind’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
    #Your build pipeline references an undefined variable named ‘Parameters.WebAppName’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
    - download: current
      artifact: drop
    - task: AzureCLI@1
      displayName: 'Azure CLI to deploy required Azure resources'
      inputs:
        azureSubscription: 'esx - Sub'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # this will create Azure resource group
          call az group create --location westus --name $(terraformstoragerg)
          call az storage account create --name $(terraformstorageaccount) --resource-group $(terraformstoragerg) --location westus --sku Standard_LRS
          call az storage container create --name terraform --account-name $(terraformstorageaccount)
          call az storage account keys list -g $(terraformstoragerg) -n $(terraformstorageaccount)
    - task: AzurePowerShell@3
      name: GetStorageKey
      displayName: 'Azure PowerShell script to get the storage key'
      inputs:
        azureSubscription: 'esx - Sub'
        ScriptType: 'InlineScript'
        Inline: |
          # Using this script we will fetch storage key which is required in terraform file to authenticate backend storage account     
          $storageAccountkey = (Get-AzureRmStorageAccountKey -ResourceGroupName $(terraformstoragerg) -AccountName $(terraformstorageaccount)).Value[0]
          echo "##vso[task.setvariable variable=storagekey]$storageAccountkey"
        azurePowerShellVersion: 'LatestVersion'
    - task: replacetokens@3
      displayName: Replace tokens in terraform file
      inputs:
        targetFiles: '$(Pipeline.Workspace)\drop\Terraform\webapp.tf'
        encoding: 'utf-8'
        writeBOM: true
        escapeType: 'none'
        actionOnMissing: 'warn'
        keepToken: false
        tokenPrefix: '__'
        tokenSuffix: '__'
        useLegacyPattern: false
        enableTelemetry: true

    - task: TerraformInstaller@0
      inputs:
        terraformVersion: '0.12.3'

    - task: TerraformTaskV1@0
      displayName: 'Terraform: init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(Pipeline.Workspace)\drop\Terraform'
        backendServiceArm: 'esx - Sub'
        backendAzureRmResourceGroupName: '$(terraformstoragerg)'
        backendAzureRmStorageAccountName: '$(terraformstorageaccount)'
        backendAzureRmContainerName: 'terraform'
        backendAzureRmKey: 'webapp.tfstate'

    - task: TerraformTaskV1@0
      displayName: 'Terraform: plan'
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(Pipeline.Workspace)\drop\Terraform'
        environmentServiceNameAzureRM: 'esx - Sub'

    - task: TerraformTaskV1@0
      displayName: 'Terraform: apply'
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(Pipeline.Workspace)\drop\Terraform'
        commandOptions: '-auto-approve'
        environmentServiceNameAzureRM: 'esx - Sub'

    - task: AzureRmWebAppDeployment@4
      displayName: 'Deploy Azure App Service'
      inputs:
        ConnectionType: 'AzureRM'
        azureSubscription: 'esx - Sub'
        appType: 'webApp'
        WebAppName: '$(appservicename)'
        packageForLinux: '$(Pipeline.Workspace)/**/*.zip'